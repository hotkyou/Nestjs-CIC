// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model EqualUser {
  User_ID   Int    @id @default(autoincrement())
  Face_img  String?
  Name      String?
  Address   String?
  Birthday  DateTime?
  Mail String?  @unique
  Pass      String?
  Age       Int?
  Job       String?
  Hobby     String?
  Intro     String?
  SID       Int?
  Sexs Sex[]
  Matching_Matching_User_ID        Matching[] @relation("Matching_Matching_User_ID")
  Matching_Matching_opponent_User_ID Matching[] @relation("Matching_Matching_opponent_User_ID")
  Talk_User_ID        Talk[] @relation("Talk_User_ID")
  Assessment_User_ID        Assessment[] @relation("Assessment_User_ID")
  Community_User_ID   Community_User[] @relation("Community_User_ID")
  Space_User_ID        Space[] @relation("Space_User_ID")  
}

model Sex {
  Sex_ID Int @id @default(autoincrement())
  User_ID   Int   
  Body_Sex  Int    
  Heart_Sex Int      
  Like_Sex  Int      

  User      EqualUser @relation(fields: [User_ID], references: [User_ID])   

}
model Matching {
  Matching_ID                  Int             @id @default(autoincrement())
  Matching_User_ID             Int
  Matching_opponent_User_ID    Int
  Matching_Bool                Int
  Matching_User                EqualUser           @relation("Matching_Matching_User_ID", fields: [Matching_User_ID], references: [User_ID])
  Matching_opponent_User       EqualUser           @relation("Matching_Matching_opponent_User_ID", fields: [Matching_opponent_User_ID], references: [User_ID])
  Matching_Talk                Talk[]
  Matching_User_Assessment     Assessment[]
}

model Talk {
  Matching_Talk_ID    Int      @id @default(autoincrement())
  Matching_ID         Int
  Matching_Talk_Content   String
  User_ID             Int
  Matching            Matching @relation(fields: [Matching_ID], references: [Matching_ID])
  User                EqualUser @relation("Talk_User_ID",fields: [User_ID], references: [User_ID])
}
model Assessment {
  Assessment_ID    Int      @id @default(autoincrement())
  User_ID                        Int
  Matching_ID                    Int
  Matching_User_Assessment       Int?
  Matching_Opponent_User_Assessment Int?

  User                           EqualUser   @relation("Assessment_User_ID",fields: [User_ID], references: [User_ID])
  Matching                       Matching @relation(fields: [Matching_ID], references: [Matching_ID])

}
model Category {
  Category_ID        Int      @id @default(autoincrement())
  Category_Content   String   
}
model Community_User {
  User_ID           Int      @id
  User_Name         String
  Icon              String?
  Spesialist_Bool   Int
  User              EqualUser    @relation("Community_User_ID",fields: [User_ID], references: [User_ID])
  Community_User_ID          Group_Talk[] @relation("Community_User_ID")
  Groups_Community_User_ID   Groups[]     @relation("Groups_Community_User_ID")
  Tweet_Community_User_ID    Tweet[]      @relation("Tweet_Community_User_ID")
  Good_Community_User_ID     Good[]       @relation("Good_Community_User_ID")
  Group_Member_Community_User_ID Group_Member[] @relation("Group_Member_Community_User_ID")
}


model Space {
  Space_ID          Int           @id @default(autoincrement())
  User_ID           Int           
  Space_Reply_ID    Int?
  Title             String
  Space_Img         String?
  Space_Date        DateTime
  
  User              EqualUser?   @relation("Space_User_ID",fields: [User_ID], references: [User_ID])  
  Space_Reply       Space?           @relation("Space_Reply", fields: [Space_Reply_ID], references: [Space_ID])
  Reply_Spaces      Space[]          @relation("Space_Reply")

}

model Community {
  Community_ID    Int           @id @default(autoincrement())
  Community_Name  String?
  Tweet_Community_ID       Tweet[] @relation("Tweet_Community_ID") 
  Groups_Community_ID          Groups[] @relation("Groups_Community_ID")

}
model Groups {
  Group_ID         Int              @id @default(autoincrement())
  Community_ID     Int
  Group_Name       String
  User_ID          Int
  Group_Create_Date DateTime
  Limit_Num        Int?
  Community        Community?        @relation("Groups_Community_ID",fields: [Community_ID], references: [Community_ID])
  Community_User   Community_User?   @relation("Groups_Community_User_ID",fields: [User_ID], references: [User_ID])
  Group_Talk_Group_ID Group_Talk[] @relation("Group_Talk_Group_ID")
  Group_Member_Groups_ID     Group_Member[] @relation("Group_Member_Groups_ID")
}
model Tweet {
  Tweet_ID      Int          @id @default(autoincrement())
  Community_ID  Int
  User_ID       Int
  Tweet_Content String
  Reply_ID      Int?
  Tweet_Date    DateTime?
  Reply         Tweet?       @relation("Tweet_Reply", fields: [Reply_ID], references: [Tweet_ID])
  Community     Community?    @relation("Tweet_Community_ID",fields: [Community_ID], references: [Community_ID])
  Community_User Community_User? @relation("Tweet_Community_User_ID",fields: [User_ID], references: [User_ID])
  Good_Tweet_ID         Good[] @relation("Good_Tweet_ID")
  Tweet_Reply      Tweet[]          @relation("Tweet_Reply")
}
model Good {
  Good_ID     Int             @id @default(autoincrement())
  User_ID     Int
  Tweet_ID    Int
  Tweet       Tweet              @relation("Good_Tweet_ID",fields: [Tweet_ID], references: [Tweet_ID])
  Community_User Community_User? @relation("Good_Community_User_ID",fields: [User_ID], references: [User_ID])
}


model Group_Talk {
  Group_Talk_ID      Int          @id @default(autoincrement())
  Group_ID           Int
  User_ID            Int
  Group_Talk_Contet  String
  Best_Answer_Bool   Int?
  Community_User     Community_User? @relation("Community_User_ID",fields: [User_ID], references: [User_ID])
  Groups              Groups?     @relation("Group_Talk_Group_ID",fields: [Group_ID], references: [Group_ID])
}

model Group_Member {
  Group_Join_User_ID  Int          @id @default(autoincrement())
  User_ID             Int
  Group_ID            Int
  Community_User      Community_User? @relation("Group_Member_Community_User_ID",fields: [User_ID], references: [User_ID])
  Groups              Groups?         @relation("Group_Member_Groups_ID",fields: [Group_ID], references: [Group_ID])
}





